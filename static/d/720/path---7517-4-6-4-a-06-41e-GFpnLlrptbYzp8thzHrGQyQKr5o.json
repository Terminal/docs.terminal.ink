{"data":{"markdownRemark":{"html":"<h2>4.6.4.1 Logic gates</h2>\n<p>Logic Gates are electrical components that are the foundation of all of computing. Computers rely on logic gates made out of transistors to perform actions. These logic gates are based off of boolean algebra, where the only values can be either a <code>1</code> or a <code>0</code>, representing an <code>on</code> or <code>off</code> state.</p>\n<table>\n<thead>\n<tr>\n<th>Boolean</th>\n<th>State</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>On</td>\n</tr>\n<tr>\n<td>0</td>\n<td>Off</td>\n</tr>\n</tbody>\n</table>\n<p>Because the boolean number system has only two digits for counting, conversion is required when converting numbers to and from decimal, our system of counting.</p>\n<h3>NOT Gate</h3>\n<p>A <code>NOT</code> gate toggles the state of the input.\nIf the input is off, the output is on.\nIf the input is on, the output is off.</p>\n<table>\n<thead>\n<tr>\n<th>Diagram</th>\n<th>Boolean Algebra</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"/assets/img/not.svg\" alt=\"An image of a NOT gate\"></td>\n<td>\\(\\overline A\\)</td>\n</tr>\n</tbody>\n</table>\n<h4>Truth Table</h4>\n<table>\n<thead>\n<tr>\n<th>A</th>\n<th>Q</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<h3>AND Gate</h3>\n<p>An <code>AND</code> gate checks if both inputs are on.\nIf both inputs are both on, the output will be on.</p>\n<table>\n<thead>\n<tr>\n<th>Diagram</th>\n<th>Boolean Algebra</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"/assets/img/and.svg\" alt=\"An image of an AND gate\"></td>\n<td>\\(A . B = Q\\)</td>\n</tr>\n</tbody>\n</table>\n<h4>Truth Table</h4>\n<table>\n<thead>\n<tr>\n<th>A</th>\n<th>B</th>\n<th>Q</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<h3>OR Gate</h3>\n<p>An <code>OR</code> gate turns on when any input is on.\nWhen one or more inputs are on, the output will be on.</p>\n<table>\n<thead>\n<tr>\n<th>Diagram</th>\n<th>Boolean Algebra</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"/assets/img/or.svg\" alt=\"An image of an OR gate\"></td>\n<td>\\(A + B = Q\\)</td>\n</tr>\n</tbody>\n</table>\n<h4>Truth Table</h4>\n<table>\n<thead>\n<tr>\n<th>A</th>\n<th>B</th>\n<th>Q</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<h3>XOR Gate</h3>\n<table>\n<thead>\n<tr>\n<th>Diagram</th>\n<th>Boolean Algebra</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"/assets/img/xor.svg\" alt=\"An image of an XOR gate\"></td>\n<td>\\(A \\oplus B = Q\\)</td>\n</tr>\n</tbody>\n</table>\n<h4>Truth Table</h4>\n<table>\n<thead>\n<tr>\n<th>A</th>\n<th>B</th>\n<th>Q</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<h3>NAND Gate</h3>\n<table>\n<thead>\n<tr>\n<th>Diagram</th>\n<th>Boolean Algebra</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"/assets/img/nand.svg\" alt=\"An image of an NAND gate\"></td>\n<td>\\(\\overline{A \\cap B} = Q\\)</td>\n</tr>\n</tbody>\n</table>\n<h4>Truth Table</h4>\n<table>\n<thead>\n<tr>\n<th>A</th>\n<th>B</th>\n<th>Q</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<h3>NOR Gate</h3>\n<table>\n<thead>\n<tr>\n<th>Diagram</th>\n<th>Boolean Algebra</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"/assets/img/nor.svg\" alt=\"An image of an NOR gate\"></td>\n<td>\\(\\overline{A \\cup B} = Q\\)</td>\n</tr>\n</tbody>\n</table>\n<h4>Truth Table</h4>\n<table>\n<thead>\n<tr>\n<th>A</th>\n<th>B</th>\n<th>Q</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<h3>Half Adder</h3>\n<p>The half adder adds two single binary digits A and B, and outputs the sum and a carry bit.\nThe carry bit is used to pass the overflow onto the next digit.</p>\n<table>\n<thead>\n<tr>\n<th>Diagram</th>\n<th>Boolean Algebra</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"/assets/img/halfadder.svg\" alt=\"An image of an half adder\"></td>\n<td>\\(A \\cap B = C\\)<br>\\(A \\oplus B = S\\)</td>\n</tr>\n</tbody>\n</table>\n<h4>Truth Table</h4>\n<table>\n<thead>\n<tr>\n<th>A</th>\n<th>B</th>\n<th>\\(C_{out}\\)</th>\n<th>S (Sum)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<h3>Full Adder</h3>\n<p>A full adder adds two single binary digits A and B, as well as accounts for bits carried in.</p>\n<table>\n<thead>\n<tr>\n<th>Diagram</th>\n<th>Boolean Algebra</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"/assets/img/fulladder.svg\" alt=\"An image of an full adder\"></td>\n<td>\\(A \\cap B = C\\)<br>\\(A \\oplus B = S\\)</td>\n</tr>\n</tbody>\n</table>\n<h4>Truth Table</h4>\n<table>\n<thead>\n<tr>\n<th>A</th>\n<th>B</th>\n<th>\\(C_{in}\\)</th>\n<th>\\(C_{out}\\)</th>\n<th>S</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>","frontmatter":{"pagename":"4.6.4 Logic Gates"},"fields":{"filename":"4.6.4"}}},"pageContext":{"permalink":"/7517/4.6.4"}}